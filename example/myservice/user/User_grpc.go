//Generated by gRPC Go plugin
//If you make any local changes, they will be lost
//source: user

package user

import "github.com/google/flatbuffers/go"

import (
	myservice "github.com/dictav/go-grpcrgen/example/myservice"
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Client API for User service
type UserClient interface {
	Get(ctx context.Context, in *flatbuffers.Builder,
		opts ...grpc.CallOption) (*User, error)
}

type userClient struct {
	cc *grpc.ClientConn
}

func NewUserClient(cc *grpc.ClientConn) UserClient {
	return &userClient{cc}
}

func (c *userClient) Get(ctx context.Context, in *flatbuffers.Builder,
	opts ...grpc.CallOption) (*User, error) {
	out := new(User)
	err := grpc.Invoke(ctx, "/user.User/Get", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for User service
type UserServer interface {
	Get(context.Context, *myservice.Request) (*flatbuffers.Builder, error)
}

func RegisterUserServer(s *grpc.Server, srv UserServer) {
	s.RegisterService(&_User_serviceDesc, srv)
}

func _User_Get_Handler(srv interface{}, ctx context.Context,
	dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(myservice.Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServer).Get(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/user.User/Get",
	}

	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServer).Get(ctx, req.(*myservice.Request))
	}
	return interceptor(ctx, in, info, handler)
}

var _User_serviceDesc = grpc.ServiceDesc{
	ServiceName: "user.User",
	HandlerType: (*UserServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Get",
			Handler:    _User_Get_Handler,
		},
	},
	Streams: []grpc.StreamDesc{},
}
