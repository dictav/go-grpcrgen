// automatically generated by the FlatBuffers compiler, do not modify

package blog

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

type Blog struct {
	_tab flatbuffers.Table
}

func GetRootAsBlog(buf []byte, offset flatbuffers.UOffsetT) *Blog {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &Blog{}
	x.Init(buf, n+offset)
	return x
}

func (rcv *Blog) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *Blog) Table() flatbuffers.Table {
	return rcv._tab
}

func (rcv *Blog) Id() uint32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.GetUint32(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *Blog) MutateId(n uint32) bool {
	return rcv._tab.MutateUint32Slot(4, n)
}

func (rcv *Blog) Title() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func (rcv *Blog) Text() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func BlogStart(builder *flatbuffers.Builder) {
	builder.StartObject(3)
}
func BlogAddId(builder *flatbuffers.Builder, id uint32) {
	builder.PrependUint32Slot(0, id, 0)
}
func BlogAddTitle(builder *flatbuffers.Builder, title flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(1, flatbuffers.UOffsetT(title), 0)
}
func BlogAddText(builder *flatbuffers.Builder, text flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(2, flatbuffers.UOffsetT(text), 0)
}
func BlogEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
