// automatically generated by the FlatBuffers compiler, do not modify

package blog

import (
	flatbuffers "github.com/google/flatbuffers/go"
	myservice "github.com/dictav/go-grpcrgen/example/myservice"
)

type GeoBlog struct {
	_tab flatbuffers.Table
}

func GetRootAsGeoBlog(buf []byte, offset flatbuffers.UOffsetT) *GeoBlog {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &GeoBlog{}
	x.Init(buf, n+offset)
	return x
}

func (rcv *GeoBlog) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *GeoBlog) Table() flatbuffers.Table {
	return rcv._tab
}

func (rcv *GeoBlog) Id() uint32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.GetUint32(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *GeoBlog) MutateId(n uint32) bool {
	return rcv._tab.MutateUint32Slot(4, n)
}

func (rcv *GeoBlog) Title() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func (rcv *GeoBlog) Text() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func (rcv *GeoBlog) Geo(obj *myservice.Geo) *myservice.Geo {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(10))
	if o != 0 {
		x := rcv._tab.Indirect(o + rcv._tab.Pos)
		if obj == nil {
			obj = new(myservice.Geo)
		}
		obj.Init(rcv._tab.Bytes, x)
		return obj
	}
	return nil
}

func GeoBlogStart(builder *flatbuffers.Builder) {
	builder.StartObject(4)
}
func GeoBlogAddId(builder *flatbuffers.Builder, id uint32) {
	builder.PrependUint32Slot(0, id, 0)
}
func GeoBlogAddTitle(builder *flatbuffers.Builder, title flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(1, flatbuffers.UOffsetT(title), 0)
}
func GeoBlogAddText(builder *flatbuffers.Builder, text flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(2, flatbuffers.UOffsetT(text), 0)
}
func GeoBlogAddGeo(builder *flatbuffers.Builder, geo flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(3, flatbuffers.UOffsetT(geo), 0)
}
func GeoBlogEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
