//Generated by gRPC Go plugin
//If you make any local changes, they will be lost
//source: test_data

package nest

import "github.com/google/flatbuffers/go"

import (
	"github.com/dictav/go-grpcrgen/test_data"
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Client API for TestNestService service
type TestNestServiceClient interface {
	DoTest(ctx context.Context, in *flatbuffers.Builder,
		opts ...grpc.CallOption) (*test_data.Test, error)
}

type testNestServiceClient struct {
	cc *grpc.ClientConn
}

func NewTestNestServiceClient(cc *grpc.ClientConn) TestNestServiceClient {
	return &testNestServiceClient{cc}
}

func (c *testNestServiceClient) DoTest(ctx context.Context, in *flatbuffers.Builder,
	opts ...grpc.CallOption) (*test_data.Test, error) {
	out := new(test_data.Test)
	err := grpc.Invoke(ctx, "/nest.TestNestService/DoTest", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for TestNestService service
type TestNestServiceServer interface {
	DoTest(context.Context, *test_data.Test) (*flatbuffers.Builder, error)
}

func RegisterTestNestServiceServer(s *grpc.Server, srv TestNestServiceServer) {
	s.RegisterService(&_TestNestService_serviceDesc, srv)
}

func _TestNestService_DoTest_Handler(srv interface{}, ctx context.Context,
	dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(test_data.Test)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TestNestServiceServer).DoTest(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/nest.TestNestService/DoTest",
	}

	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TestNestServiceServer).DoTest(ctx, req.(*test_data.Test))
	}
	return interceptor(ctx, in, info, handler)
}

var _TestNestService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "nest.TestNestService",
	HandlerType: (*TestNestServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "DoTest",
			Handler:    _TestNestService_DoTest_Handler,
		},
	},
	Streams: []grpc.StreamDesc{},
}
