//Generated by gRPC Go plugin
//If you make any local changes, they will be lost
//source: test_data

package test_data

import "github.com/google/flatbuffers/go"

import (
  context "golang.org/x/net/context"
  grpc "google.golang.org/grpc"
)

// Client API for Test2Service service
type Test2ServiceClient interface{
  DoTest(ctx context.Context, in *flatbuffers.Builder, 
  	opts... grpc.CallOption) (* Test, error)  
}

type test2ServiceClient struct {
  cc *grpc.ClientConn
}

func NewTest2ServiceClient(cc *grpc.ClientConn) Test2ServiceClient {
  return &test2ServiceClient{cc}
}

func (c *test2ServiceClient) DoTest(ctx context.Context, in *flatbuffers.Builder, 
	opts... grpc.CallOption) (* Test, error) {
  out := new(Test)
  err := grpc.Invoke(ctx, "/test_data.Test2Service/DoTest", in, out, c.cc, opts...)
  if err != nil { return nil, err }
  return out, nil
}

// Server API for Test2Service service
type Test2ServiceServer interface {
  DoTest(context.Context, *Test) (*flatbuffers.Builder, error)  
}

func RegisterTest2ServiceServer(s *grpc.Server, srv Test2ServiceServer) {
  s.RegisterService(&_Test2Service_serviceDesc, srv)
}

func _Test2Service_DoTest_Handler(srv interface{}, ctx context.Context,
	dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
  in := new(Test)
  if err := dec(in); err != nil { return nil, err }
  if interceptor == nil { return srv.(Test2ServiceServer).DoTest(ctx, in) }
  info := &grpc.UnaryServerInfo{
    Server: srv,
    FullMethod: "/test_data.Test2Service/DoTest",
  }
  
  handler := func(ctx context.Context, req interface{}) (interface{}, error) {
    return srv.(Test2ServiceServer).DoTest(ctx, req.(* Test))
  }
  return interceptor(ctx, in, info, handler)
}


var _Test2Service_serviceDesc = grpc.ServiceDesc{
  ServiceName: "test_data.Test2Service",
  HandlerType: (*Test2ServiceServer)(nil),
  Methods: []grpc.MethodDesc{
    {
      MethodName: "DoTest",
      Handler: _Test2Service_DoTest_Handler, 
    },
  },
  Streams: []grpc.StreamDesc{
  },
}

